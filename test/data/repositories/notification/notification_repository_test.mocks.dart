// Mocks generated by Mockito 5.4.4 from annotations
// in enxolist/test/data/repositories/notification/notification_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:enxolist/data/data_source/notification/notification_remote_datasource_impl.dart'
    as _i3;
import 'package:enxolist/data/models/notification/notification_dto.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotificationDTO_0 extends _i1.SmartFake
    implements _i2.NotificationDTO {
  _FakeNotificationDTO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationRemoteDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRemoteDatasourceImpl extends _i1.Mock
    implements _i3.NotificationRemoteDatasourceImpl {
  MockNotificationRemoteDatasourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NotificationDTO> createNotification(
          _i2.NotificationDTO? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotification,
          [notification],
        ),
        returnValue:
            _i4.Future<_i2.NotificationDTO>.value(_FakeNotificationDTO_0(
          this,
          Invocation.method(
            #createNotification,
            [notification],
          ),
        )),
      ) as _i4.Future<_i2.NotificationDTO>);

  @override
  _i4.Future<String> deleteNotification(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNotification,
          [id],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #deleteNotification,
            [id],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<_i2.NotificationDTO>> getNotifications(String? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotifications,
          [user],
        ),
        returnValue: _i4.Future<List<_i2.NotificationDTO>>.value(
            <_i2.NotificationDTO>[]),
      ) as _i4.Future<List<_i2.NotificationDTO>>);

  @override
  _i4.Future<int> getNotificationCount(String? user) => (super.noSuchMethod(
        Invocation.method(
          #getNotificationCount,
          [user],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
